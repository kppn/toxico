

.row
    - button_disabled = { 'new' => true, 'show' => false }[controller.action_name]
    .col-md-12
        = button_tag :disabled => button_disabled, :id => 'execute', :class => 'btn btn-primary execute'
            | 実行

    .col-md-12
        = form_for @work do |f|
            | 入力
            = f.fields_for :code do |cf|
                = cf.text_area :input, :size => '60x1', :class => 'form-control result', :autocapitalize => 'none'

            | 結果
            = image_tag 'execute_loading.gif', :id => 'execute_loading', :style => 'visibility: hidden'
            span#execute_notice.notice_text = flash[:notice]
            = text_area_tag 'result', '', :size => '60x1', :class => 'form-control result', :autocapitalize => 'none'
        
            = f.fields_for :code do |cf|
                = cf.text_area :content, :size => '60x35', :class => 'form-control content', :autocapitalize => 'none'

            - if controller.action_name == 'new'
                = f.text_area :name, :size => '1x1', :class => 'form-control', :placeholder => '名前', :autocapitalize => 'none'
            = f.hidden_field :language
    
            - if controller.action_name == 'new'
                .actions = f.submit '保存', :disabled => button_disabled, :id => 'new_save', :class => 'btn btn-primary'

        / button要素をformの子にしてはならない。ブラウザ動作でリクエストが飛んでしまう
        - if controller.action_name == 'show'
            = button_tag :id => 'save', :class => 'btn btn-primary save'
               | 保存
            = image_tag 'save_loading.gif', :id => 'save_loading', :style => 'visibility: hidden'
            span#save_notice.notice_text

.row
    .col-md-12.additional_menu_area
        dl#additional_menu.additional_menu
            div
                dt.text-center
                    = image_tag 'wave_allow_down.png', :id => 'wave_allow_down', :class => 'wave_allow_down'
                dd
                    - if controller.action_name == 'show'
                        .separator
                            .row.additional_menu_row
                                .col-md-2
                                    | 自動保存 
                                .col-md-10
                                    #autosave.btn-group data-toggle='buttons'
                                        label.btn.btn-primary
                                            = radio_button_tag 'autosave', 'on'
                                            | On
                                        label.btn.btn-primary.active
                                            = radio_button_tag 'autosave', 'off'
                                            | Off
                    .separator
                        .row.additional_menu_row
                            span#create_file_url.create_file_url
                                = "/works/#{@work.id}/files"
                            .col-md-2
                                | ファイルダウンロード
                            .col-md-2
                                = button_tag :id => 'create_file', :class => 'btn btn-primary create_file'
                                    | 作成
                            .col-md-8#file_link_box
                                span#create_file_notice.notice_text



css:
    body {
        margin-bottom: 20px;
    }

    .execute {
        width: 100%;
    }

    .content {
        font-family: monospace;
    }

    .result {
        border: solid 1px;
        height: 30px;
        font-family: monospace;
    }

    .notice_text {
        color: #ff0000;
    }

    .additional_menu dd {
        display: none;
    }
    
    .additional_menu {
        padding-top: 4px;
        padding-bottom: 4px;
    }

    .additional_menu_row {
        padding-top: 10px;
        padding-bottom: 10px;
    }

    .separator {
        border-bottom: solid 2px;
        border-bottom-width: 90%;
        border-color: #e0e0e0;
    }

    .wave_allow_down {
        width: 40px;
        height: auto;
    }

    .rotate_180 {
        transform: rotate(180deg);
    }

    .create_file_url {
        display: none;
    }


opal:
    require 'opal-jquery'

    Document.ready? do
      # expand row of input area
      elem = Element['#work_code_attributes_input']
      elem.attr 'rows', elem.value.count("\n") + 1
    end

    Element['#work_code_attributes_input'].on :change do |evt|
      # expand row of input area
      elem = evt.element
      elem.attr 'rows', elem.value.count("\n") + 1
    end

    Element['.language-select-botton'].on :click do |evt|
      # change button kind (btn-default, btn-primary, ...)
      Element['.language-select-botton'].each do |elem|
        elem.remove_class('btn-primary')
      end
      evt.element.add_class('btn-primary')

      # save selected language to hidden
      Element['#work_language'].value = evt.element.id

      # enable execute/save button
      Element['#execute'].prop('disabled', false)
      Element['#new_save'].prop('disabled', false)

      # fill template code to content area
      templete = case evt.element.id
                 when 'c'  ; "#include <stdio.h>\n\nint main()\n{\n    printf(\"\");\n    return 0;\n}"
                 when 'go' ; "package main\nimport (\"fmt\")\n\nfunc main() {\n    fmt.Println(\"\")\n}"
                 else      ; ""
                 end
      content = Element['#work_code_attributes_content'].value 
      if content && content == ''
        Element['#work_code_attributes_content'].value = templete
      end
    end

    Element['#execute'].on :click do
      # visible loading image
      Element['#execute_loading'].css('visibility', 'visible')

      # execute, and get result
      payload = {
        work: {
          code_attributes: {
            input:    Element['#work_code_attributes_input'].value,
            content:  Element['#work_code_attributes_content'].value
          },
          language: Element['#work_language'].value,
        }
      }

      HTTP.post('/works/execute', payload: payload) do |response|
        result = response.json[:result]
        notice = response.json[:notice]

        Element['#result'].text         = result
        Element['#execute_notice'].text = notice
        Element['#result'].attr 'rows', result.count("\n") + 1

        # hide loading image
        Element['#execute_loading'].css('visibility', 'hidden')
      end
    end


    def save
      # visible loading image
      Element['#save_loading'].css('visibility', 'visible')

      # save on ajax
      url  = Element[:form][:action]
      payload = {
        work: {
          code_attributes: {
            input:    Element['#work_code_attributes_input'].value,
            content:  Element['#work_code_attributes_content'].value
          },
          language: Element['#work_language'].value,
        }
      }

      HTTP.put(url, payload: payload) do |response|
        result = response.json[:result]
        notice = response.json[:notice]
        unless notice.empty?
          Element['#save_notice'].text = notice
        end

        # hide loading image
        Element['#save_loading'].css('visibility', 'hidden')
      end
    end


    Element['#save'].on :click do
      save
    end


    class Interval
      def initialize(time = 0, &block)
        @interval = `setInterval(function(){#{block.call}}, time)`
      end

      def stop
        `clearInterval(#@interval)`
      end
    end

    interval = nil
    Element['#autosave input[type=radio]'].on :change do |evt|
      val = evt.element.value
      case val
      when 'on'
        interval = Interval.new 60000 do
                     save
                   end
      when 'off'
        interval.stop
      end
    end


    #=============== Additional features ================

    Element['#additional_menu dt'].on :click do |evt|
      # allow rotate
      if Element['#additional_menu dd'].css('display') == 'block'
        Element['#wave_allow_down'].remove_class('rotate_180')
      else
        Element['#wave_allow_down'].add_class('rotate_180')
      end

      # toggle additional area
      evt.element.next.slide_toggle 100
    end


    Element['#create_file'].on :click do |evt|
      Element['#file_link_box a'].remove()

      # create file and get url on ajax
      url  = Element['#create_file_url'].text
      payload = {
        work: {
          code_attributes: {
            input:    Element['#work_code_attributes_input'].value,
            content:  Element['#work_code_attributes_content'].value
          },
          language: Element['#work_language'].value,
        }
      }

      HTTP.post(url, payload: payload) do |response|
        result = response.json[:result]
        notice = response.json[:notice]

        unless notice.empty?
          Element['#create_file_notice'].text = notice
          #break
        end

        file_url = "<a href='#{result}'>#{result}</a>"
        Element['#file_link_box'].append(file_url)
      end
    end

